#pragma once

#include <cstdlib>   // rand()
#include <chrono>
#include <algorithm> // std::sort
#include <iostream>

#include "structures/ReplayBuffer.h"
#include "structures/Set_S.h"
#include "structures/Map_T.h"
#include "big_board/BigBoard.h"
#include "Descent.h" // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç descent(board, moveTimeLimit)
#include "boards/utils/big_board_renderer.h"

class SelfPlayer {
public:
    explicit SelfPlayer(ReplayBuffer &replayBuffer, SharedMemory &shm)
        : replayBuffer(replayBuffer),
          descentLogic(S, V, shm) // –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ S –∏ V –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Descent
    {
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ–∏–≥—Ä—ã, –ø–æ–∫–∞ –≤ –±—É—Ñ–µ—Ä–µ –Ω–µ –Ω–∞–∫–æ–ø–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     * @param moveTimeLimit - –≤—Ä–µ–º—è (–≤ —Å–µ–∫) –¥–ª—è Descent
     */
    void runSelfPlay() {
        while (!replayBuffer.isEnoughNewData()) {
            playSingleGame();
            std::cout << "---Before Added---" << std::endl;
            std::cout << "New Added: " << replayBuffer.newAddedCount << std::endl;
            std::cout << "Buffer Size: " << replayBuffer.bufferSize() << std::endl;
            std::cout << "S.size: " << S.size << std::endl;
            replayBuffer.moveAll(S, V); // –ü–æ—Å–ª–µ –ø–∞—Ä—Ç–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ (s, v(s)) –∏–∑ S –≤ –±—É—Ñ–µ—Ä,
            std::cout << "---After Added---" << std::endl;
            std::cout << "New Added: " << replayBuffer.newAddedCount << std::endl;
            std::cout << "Buffer Size: " << replayBuffer.bufferSize() << std::endl;
            std::cout << "S.size: " << S.size << std::endl;
        }
    }

private:
    ReplayBuffer &replayBuffer; ///< –ë—É—Ñ–µ—Ä –¥–ª—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ)
    Map_T V; ///< –•—Ä–∞–Ω–∏—Ç v(s) –∏ v'(s,a)
    Set_S S; ///< –•—Ä–∞–Ω–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    Descent descentLogic; ///< –ê–ª–≥–æ—Ä–∏—Ç–º Descent, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å S –∏ V
    int moveNum = 0;
    /**
     * –û–¥–Ω–∞ –ø–∞—Ä—Ç–∏—è —Å–∞–º–æ–∏–≥—Ä—ã: –¥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
     * –í –∫–∞–∂–¥–æ–º —Ö–æ–¥—É –≤—ã–∑—ã–≤–∞–µ–º Descent, –∞ –∑–∞—Ç–µ–º –≤—ã–±–∏—Ä–∞–µ–º —Ö–æ–¥ –ø–æ Ordinal distribution.
     */
    void playSingleGame() {
        BigBoard *board = new BigBoard();
        moveNum = 0;
        while (!board->isGameOver()) {
            descentLogic.descent(board, params::MOVE_TIME_LIMIT); // S, T ‚Üê descent(s, S, T, fŒ∏, ft)
            uint8_t action = selectMoveOrdinal(board, params::ORDINAL_ACTION_RATIO); //a ‚Üê action_selection(s, S, T)
            board->applyMove(action); //s ‚Üê a(s)
            drawBigBoard(*board);
            std::cout << "S.size = " << S.size << std::endl;
            std::cout << "Move Num: " << moveNum << std::endl;
            moveNum++;
        }
        delete board;
    }

    /**
     * –†–µ–∞–ª–∏–∑—É–µ—Ç Ordinal action distribution:
     *  - —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–æ–¥—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é/–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä–æ–∫–∞;
     *  - –∏–¥—ë–º –æ—Ç –ª—É—á—à–µ–≥–æ –∫ —Ö—É–¥—à–µ–º—É, –Ω–∞ j-–º —à–∞–≥–µ –±—Ä–æ—Å–∞–µ–º —Å–ª—É—á–∞–π [0..1];
     *  - c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é p –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥, –∏–Ω–∞—á–µ –∏–¥—ë–º –∫ j+1;
     *  - –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π.
     *  - ratio = 0:  —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º ùëõ ‚àí ùëó –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º.
     *  - ratio = 1:  –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π –ª—É—á—à–∏–π) —Ö–æ–¥
     */
    uint8_t selectMoveOrdinal(BigBoard *board, float ratio) {
        if (moveNum == 0) {
            ratio = 0.0;
        }
        uint8_t *moves = board->getValidMoves();
        int movesCount = moves[0];
        if (movesCount == 0) {
            return 0;
        }

        bool firstPlayer = (board->getCurrentPlayer() == cell::X);

        MoveVal mv[81];

        for (int i = 0; i < movesCount; ++i) {
            uint8_t m = moves[i + 1];
            mv[i].move = m;
            mv[i].val = V(board, m);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤
        if (firstPlayer) {
            std::sort(mv, mv + movesCount, compare_desc);
        } else {
            std::sort(mv, mv + movesCount, compare_asc);
        }

        // –ê–ª–≥–æ—Ä–∏—Ç–º Ordinal:
        // –ù–∞ j-–º —à–∞–≥–µ p = ratio * ((n-j-1)/(n-j)) + (1/(n-j))
        int n = movesCount;
        for (int j = 0; j < n; j++) {
            float p = ratio * (float(n - j - 1) / float(n - j))
                      + (1.0f / float(n - j));

            float r = float(rand()) / float(RAND_MAX);
            if (r < p) {
                return mv[j].move;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ "–æ—Ç–≤–µ—Ä–≥–ª–∏" - –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        return mv[n - 1].move;
    }

    struct MoveVal {
        uint8_t move;
        float val;
    };

    static inline bool compare_desc(const MoveVal &a, const MoveVal &b) noexcept {
        return a.val > b.val;
    }

    static inline bool compare_asc(const MoveVal &a, const MoveVal &b) noexcept {
        return a.val < b.val;
    }
};
